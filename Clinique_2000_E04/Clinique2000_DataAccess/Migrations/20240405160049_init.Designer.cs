// <auto-generated />
using System;
using Clinique2000_DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Clinique2000_DataAccess.Migrations
{
    [DbContext(typeof(CliniqueDbContext))]
    [Migration("20240405160049_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Clinique2000_Core.Models.Adresse", b =>
                {
                    b.Property<int>("AdresseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdresseID"), 1L, 1);

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Rue")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("AdresseID");

                    b.ToTable("Adresses");

                    b.HasData(
                        new
                        {
                            AdresseID = 1,
                            CodePostal = "J4G 2M6",
                            Numero = "505",
                            Pays = "Canada",
                            Province = "Québec",
                            Rue = "Rue Adoncour",
                            Ville = "Longueuil"
                        },
                        new
                        {
                            AdresseID = 2,
                            CodePostal = "J4M 2X1",
                            Numero = "1615",
                            Pays = "Canada",
                            Province = "Québec",
                            Rue = "Blvd Jacques-Cartier",
                            Ville = "Longueuil"
                        },
                        new
                        {
                            AdresseID = 3,
                            CodePostal = "J4K 1E2",
                            Numero = "1144",
                            Pays = "Canada",
                            Province = "Québec",
                            Rue = "Rue Saint-Laurent",
                            Ville = "Longueuil"
                        },
                        new
                        {
                            AdresseID = 4,
                            CodePostal = "J4V 2H2",
                            Numero = "3141",
                            Pays = "Canada",
                            Province = "Québec",
                            Rue = "Blvd Taschereau",
                            Ville = "Longueuil"
                        },
                        new
                        {
                            AdresseID = 5,
                            CodePostal = "H3B 4G1",
                            Numero = "895",
                            Pays = "Canada",
                            Province = "Québec",
                            Rue = "Rue De la Gauchetiére",
                            Ville = "Montreal"
                        },
                        new
                        {
                            AdresseID = 6,
                            CodePostal = "J3Y 3P5",
                            Numero = "5580",
                            Pays = "Canada",
                            Province = "Québec",
                            Rue = " Ch. de Chambly B",
                            Ville = "Saint-Hubert"
                        });
                });

            modelBuilder.Entity("Clinique2000_Core.Models.AdressesQuebec", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProvinceAbbr")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int>("TimeZone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AdressesQuebec");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.ApiKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.Clinique", b =>
                {
                    b.Property<int>("CliniqueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CliniqueID"), 1L, 1);

                    b.Property<int>("AdresseID")
                        .HasColumnType("int");

                    b.Property<string>("Courriel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreateurID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EstActive")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("HeureFermeture")
                        .IsRequired()
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("HeureOuverture")
                        .IsRequired()
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("HeurePauseDebut")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("HeurePauseFin")
                        .HasColumnType("time");

                    b.Property<string>("NomClinique")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumTelephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.Property<int>("TempsMoyenConsultation")
                        .HasColumnType("int");

                    b.HasKey("CliniqueID");

                    b.HasIndex("AdresseID")
                        .IsUnique();

                    b.HasIndex("CreateurID");

                    b.ToTable("Cliniques");

                    b.HasData(
                        new
                        {
                            CliniqueID = 1,
                            AdresseID = 1,
                            Courriel = "contact@adoncour.ca",
                            CreateurID = "7cc96785-8933-4eac-8d7f-a289b28df223",
                            DateCreation = new DateTime(2024, 4, 5, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(2748),
                            EstActive = true,
                            HeureFermeture = new TimeSpan(0, 15, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 12, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 13, 0, 0, 0),
                            NomClinique = "Clinique Adoncour",
                            NumTelephone = "(450) 646-4445",
                            Statut = 1,
                            TempsMoyenConsultation = 30
                        },
                        new
                        {
                            CliniqueID = 2,
                            AdresseID = 2,
                            Courriel = "contact@pboucher.ca",
                            CreateurID = "7cc96785-8933-4eac-8d7f-a289b28df223",
                            DateCreation = new DateTime(2024, 4, 5, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(2793),
                            EstActive = true,
                            HeureFermeture = new TimeSpan(0, 22, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 12, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 13, 0, 0, 0),
                            NomClinique = "Clinique Pierre-Boucher",
                            NumTelephone = "(450) 468-6223",
                            Statut = 1,
                            TempsMoyenConsultation = 30
                        },
                        new
                        {
                            CliniqueID = 3,
                            AdresseID = 3,
                            Courriel = "contact@camu.ca",
                            CreateurID = "7cc96785-8933-4eac-8d7f-a289b28df223",
                            DateCreation = new DateTime(2024, 4, 5, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(2796),
                            EstActive = true,
                            HeureFermeture = new TimeSpan(0, 18, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 12, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 13, 0, 0, 0),
                            NomClinique = "Clinique Medicale Urgence Camu",
                            NumTelephone = "(450) 679-4333",
                            Statut = 0,
                            TempsMoyenConsultation = 20
                        },
                        new
                        {
                            CliniqueID = 4,
                            AdresseID = 4,
                            Courriel = "contact@cigogne.ca",
                            CreateurID = "7cc96785-8933-4eac-8d7f-a289b28df223",
                            DateCreation = new DateTime(2024, 4, 5, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(2799),
                            EstActive = true,
                            HeureFermeture = new TimeSpan(0, 20, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 12, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 13, 0, 0, 0),
                            NomClinique = "Medical Clinic GMF La Cigogne",
                            NumTelephone = "(450) 466-7892",
                            Statut = 0,
                            TempsMoyenConsultation = 40
                        },
                        new
                        {
                            CliniqueID = 5,
                            AdresseID = 5,
                            Courriel = "contact@cmenroute.ca",
                            CreateurID = "7cc96785-8933-4eac-8d7f-a289b28df223",
                            DateCreation = new DateTime(2024, 4, 5, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(2802),
                            EstActive = true,
                            HeureFermeture = new TimeSpan(0, 16, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 12, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 13, 0, 0, 0),
                            NomClinique = "Clinique Medicale en Route",
                            NumTelephone = "(514) 954-1444",
                            Statut = 0,
                            TempsMoyenConsultation = 10
                        },
                        new
                        {
                            CliniqueID = 6,
                            AdresseID = 6,
                            Courriel = "contact@chambly.com",
                            CreateurID = "7cc96785-8933-4eac-8d7f-a289b28df223",
                            DateCreation = new DateTime(2024, 4, 5, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(2806),
                            EstActive = true,
                            HeureFermeture = new TimeSpan(0, 16, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 12, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 13, 0, 0, 0),
                            NomClinique = "Centre Médical Chambly Latour",
                            NumTelephone = "(450) 926-2236",
                            Statut = 0,
                            TempsMoyenConsultation = 15
                        });
                });

            modelBuilder.Entity("Clinique2000_Core.Models.Consultation", b =>
                {
                    b.Property<int>("ConsultationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultationID"), 1L, 1);

                    b.Property<int?>("DetailsConsultationId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeCliniqueID")
                        .HasColumnType("int");

                    b.Property<DateTime>("HeureDateDebutPrevue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HeureDateDebutReele")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HeureDateFinPrevue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HeureDateFinReele")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ListeAttenteID")
                        .HasColumnType("int");

                    b.Property<int?>("PatientAChargeId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<int?>("PlageHoraireID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("StatutConsultation")
                        .HasColumnType("int");

                    b.HasKey("ConsultationID");

                    b.HasIndex("DetailsConsultationId");

                    b.HasIndex("EmployeCliniqueID");

                    b.HasIndex("ListeAttenteID");

                    b.HasIndex("PatientAChargeId");

                    b.HasIndex("PatientID");

                    b.HasIndex("PlageHoraireID");

                    b.ToTable("Consultations");

                    b.HasData(
                        new
                        {
                            ConsultationID = 1,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 8, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 8, 30, 0, 0, DateTimeKind.Local),
                            PatientID = 1,
                            PlageHoraireID = 1,
                            StatutConsultation = 2
                        },
                        new
                        {
                            ConsultationID = 2,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 8, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 8, 30, 0, 0, DateTimeKind.Local),
                            PatientID = 2,
                            PlageHoraireID = 1,
                            StatutConsultation = 2
                        },
                        new
                        {
                            ConsultationID = 3,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 8, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 9, 0, 0, 0, DateTimeKind.Local),
                            PatientID = 3,
                            PlageHoraireID = 2,
                            StatutConsultation = 2
                        },
                        new
                        {
                            ConsultationID = 4,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 8, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 9, 0, 0, 0, DateTimeKind.Local),
                            PatientID = 4,
                            PlageHoraireID = 2,
                            StatutConsultation = 2
                        },
                        new
                        {
                            ConsultationID = 5,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 9, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 9, 30, 0, 0, DateTimeKind.Local),
                            PatientID = 5,
                            PlageHoraireID = 3,
                            StatutConsultation = 2
                        },
                        new
                        {
                            ConsultationID = 6,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 9, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 9, 30, 0, 0, DateTimeKind.Local),
                            PatientID = 6,
                            PlageHoraireID = 3,
                            StatutConsultation = 2
                        },
                        new
                        {
                            ConsultationID = 7,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 9, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 10, 0, 0, 0, DateTimeKind.Local),
                            PatientID = 7,
                            PlageHoraireID = 4,
                            StatutConsultation = 2
                        },
                        new
                        {
                            ConsultationID = 8,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 9, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 10, 0, 0, 0, DateTimeKind.Local),
                            PatientID = 8,
                            PlageHoraireID = 4,
                            StatutConsultation = 2
                        },
                        new
                        {
                            ConsultationID = 9,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 10, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 10, 30, 0, 0, DateTimeKind.Local),
                            PatientID = 9,
                            PlageHoraireID = 5,
                            StatutConsultation = 2
                        },
                        new
                        {
                            ConsultationID = 10,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 10, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 10, 30, 0, 0, DateTimeKind.Local),
                            PatientID = 10,
                            PlageHoraireID = 5,
                            StatutConsultation = 2
                        },
                        new
                        {
                            ConsultationID = 11,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 10, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 11, 0, 0, 0, DateTimeKind.Local),
                            PatientID = 11,
                            PlageHoraireID = 6,
                            StatutConsultation = 2
                        },
                        new
                        {
                            ConsultationID = 12,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 10, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 11, 0, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 6,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 13,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 11, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 11, 30, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 7,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 14,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 11, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 11, 30, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 7,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 15,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 12, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 12, 30, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 8,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 16,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 12, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 12, 30, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 8,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 17,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 12, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 13, 0, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 9,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 18,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 12, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 13, 0, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 9,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 19,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 13, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 13, 30, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 10,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 20,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 13, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 13, 30, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 10,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 21,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 13, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 14, 0, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 11,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 22,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 13, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 14, 0, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 11,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 23,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 15, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 15, 0, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 12,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 24,
                            HeureDateDebutPrevue = new DateTime(2024, 4, 6, 16, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 4, 6, 17, 0, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 12,
                            StatutConsultation = 6
                        });
                });

            modelBuilder.Entity("Clinique2000_Core.Models.Critique", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<int>("CliniqueId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Note")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Texte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReviewId");

                    b.HasIndex("CliniqueId");

                    b.HasIndex("PatientId");

                    b.ToTable("Critiques");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.DetailsConsultation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Diagnostic")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("EstAlergique")
                        .HasColumnType("bit");

                    b.Property<string>("MedicamentsPrescrits")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("MotifRendezVous")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Symptomes")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("DetailsConsultation");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.EmployesClinique", b =>
                {
                    b.Property<int>("EmployeCliniqueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeCliniqueID"), 1L, 1);

                    b.Property<int>("CliniqueID")
                        .HasColumnType("int");

                    b.Property<string>("EmployeCliniqueCourriel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeCliniqueNom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeCliniquePosition")
                        .HasColumnType("int");

                    b.Property<string>("EmployeCliniquePrenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EmployeCliniqueID");

                    b.HasIndex("CliniqueID");

                    b.HasIndex("UserID");

                    b.ToTable("EmployesClinique");

                    b.HasData(
                        new
                        {
                            EmployeCliniqueID = 1,
                            CliniqueID = 1,
                            EmployeCliniqueCourriel = "numcliniquetest@gmail.com",
                            EmployeCliniqueNom = "Tremblay",
                            EmployeCliniquePosition = 0,
                            EmployeCliniquePrenom = "Mark"
                        },
                        new
                        {
                            EmployeCliniqueID = 2,
                            CliniqueID = 1,
                            EmployeCliniqueCourriel = "testproject2132@gmail.com",
                            EmployeCliniqueNom = "Dubois",
                            EmployeCliniquePosition = 0,
                            EmployeCliniquePrenom = "Monique"
                        },
                        new
                        {
                            EmployeCliniqueID = 3,
                            CliniqueID = 1,
                            EmployeCliniqueCourriel = "sylviebeton98@gmail.com",
                            EmployeCliniqueNom = "Beton",
                            EmployeCliniquePosition = 1,
                            EmployeCliniquePrenom = "Sylvie"
                        },
                        new
                        {
                            EmployeCliniqueID = 4,
                            CliniqueID = 1,
                            EmployeCliniqueCourriel = "clinique597@gmail.com",
                            EmployeCliniqueNom = "Bostan",
                            EmployeCliniquePosition = 1,
                            EmployeCliniquePrenom = "Max"
                        });
                });

            modelBuilder.Entity("Clinique2000_Core.Models.ListeAttente", b =>
                {
                    b.Property<int>("ListeAttenteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ListeAttenteID"), 1L, 1);

                    b.Property<int>("CliniqueID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEffectivite")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("HeureFermeture")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HeureOuverture")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HeurePauseDebut")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HeurePauseFin")
                        .HasColumnType("time");

                    b.Property<bool>("IsOuverte")
                        .HasColumnType("bit");

                    b.Property<int>("NbMedecinsDispo")
                        .HasColumnType("int");

                    b.HasKey("ListeAttenteID");

                    b.HasIndex("CliniqueID");

                    b.ToTable("ListeAttentes");

                    b.HasData(
                        new
                        {
                            ListeAttenteID = 1,
                            CliniqueID = 1,
                            DateEffectivite = new DateTime(2024, 4, 6, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(2847),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 2,
                            CliniqueID = 2,
                            DateEffectivite = new DateTime(2024, 4, 6, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(2861),
                            HeureFermeture = new TimeSpan(0, 8, 30, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 1
                        },
                        new
                        {
                            ListeAttenteID = 3,
                            CliniqueID = 3,
                            DateEffectivite = new DateTime(2024, 4, 6, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(2871),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 4,
                            CliniqueID = 4,
                            DateEffectivite = new DateTime(2024, 4, 6, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(2879),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 3
                        },
                        new
                        {
                            ListeAttenteID = 5,
                            CliniqueID = 5,
                            DateEffectivite = new DateTime(2024, 4, 6, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(2887),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 6,
                            CliniqueID = 6,
                            DateEffectivite = new DateTime(2024, 4, 6, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(2896),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 3
                        },
                        new
                        {
                            ListeAttenteID = 7,
                            CliniqueID = 2,
                            DateEffectivite = new DateTime(2024, 4, 7, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(2903),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 8,
                            CliniqueID = 2,
                            DateEffectivite = new DateTime(2024, 4, 7, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(2911),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 3
                        },
                        new
                        {
                            ListeAttenteID = 9,
                            CliniqueID = 3,
                            DateEffectivite = new DateTime(2024, 4, 7, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(2919),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 10,
                            CliniqueID = 4,
                            DateEffectivite = new DateTime(2024, 4, 9, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(2927),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 3
                        },
                        new
                        {
                            ListeAttenteID = 11,
                            CliniqueID = 4,
                            DateEffectivite = new DateTime(2024, 4, 10, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(2935),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = false,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 12,
                            CliniqueID = 4,
                            DateEffectivite = new DateTime(2024, 4, 11, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(2944),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = false,
                            NbMedecinsDispo = 3
                        },
                        new
                        {
                            ListeAttenteID = 13,
                            CliniqueID = 5,
                            DateEffectivite = new DateTime(2024, 4, 8, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(2951),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 14,
                            CliniqueID = 6,
                            DateEffectivite = new DateTime(2024, 4, 9, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(2959),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 3
                        },
                        new
                        {
                            ListeAttenteID = 15,
                            CliniqueID = 1,
                            DateEffectivite = new DateTime(2024, 4, 8, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(2966),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = false,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 16,
                            CliniqueID = 5,
                            DateEffectivite = new DateTime(2024, 4, 9, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(2974),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 3
                        },
                        new
                        {
                            ListeAttenteID = 17,
                            CliniqueID = 5,
                            DateEffectivite = new DateTime(2024, 4, 10, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(2982),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = false,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 18,
                            CliniqueID = 5,
                            DateEffectivite = new DateTime(2024, 4, 11, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(3029),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = false,
                            NbMedecinsDispo = 3
                        },
                        new
                        {
                            ListeAttenteID = 19,
                            CliniqueID = 6,
                            DateEffectivite = new DateTime(2024, 4, 6, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(3037),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 20,
                            CliniqueID = 6,
                            DateEffectivite = new DateTime(2024, 4, 7, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(3044),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 3
                        },
                        new
                        {
                            ListeAttenteID = 21,
                            CliniqueID = 6,
                            DateEffectivite = new DateTime(2024, 4, 8, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(3053),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 22,
                            CliniqueID = 6,
                            DateEffectivite = new DateTime(2024, 4, 9, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(3061),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 3
                        },
                        new
                        {
                            ListeAttenteID = 23,
                            CliniqueID = 6,
                            DateEffectivite = new DateTime(2024, 4, 10, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(3068),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = false,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 24,
                            CliniqueID = 6,
                            DateEffectivite = new DateTime(2024, 4, 11, 12, 0, 48, 738, DateTimeKind.Local).AddTicks(3076),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = false,
                            NbMedecinsDispo = 3
                        });
                });

            modelBuilder.Entity("Clinique2000_Core.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Courriel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateDeNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NAM")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumTelephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("preferenceNotification")
                        .HasColumnType("int");

                    b.HasKey("PatientId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            Age = 32,
                            CodePostal = "J4J 1Z4",
                            Courriel = "",
                            DateDeNaissance = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Masculin",
                            NAM = "EASC 2342 4332",
                            Nom = "Eastwood",
                            NumTelephone = "5142290535",
                            Prenom = "Clint",
                            UserId = "7cc96785-8933-4eac-8d7f-a289b28df223",
                            preferenceNotification = 0
                        },
                        new
                        {
                            PatientId = 2,
                            Age = 27,
                            CodePostal = "J4J 1V2",
                            Courriel = "",
                            DateDeNaissance = new DateTime(1995, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Féminin",
                            NAM = "BLUE 4232 4332",
                            Nom = "Blunt",
                            NumTelephone = "5142290536",
                            Prenom = "Emily",
                            UserId = "e2b8f367-6c94-4a3e-b5a6-45dabec4d2e2",
                            preferenceNotification = 0
                        },
                        new
                        {
                            PatientId = 3,
                            Age = 36,
                            CodePostal = "J4J 1G4",
                            Courriel = "",
                            DateDeNaissance = new DateTime(1985, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Masculin",
                            NAM = "MARB 3244 2233",
                            Nom = "Brando",
                            NumTelephone = "5142290537",
                            Prenom = "Marlon",
                            UserId = "f3c9e478-8d81-4aaf-aa77-56e1d3f5f3f3",
                            preferenceNotification = 0
                        },
                        new
                        {
                            PatientId = 4,
                            Age = 44,
                            CodePostal = "J4J 1H6",
                            Courriel = "",
                            DateDeNaissance = new DateTime(1980, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Féminin",
                            NAM = "PORT 3443 3433",
                            Nom = "Portman",
                            NumTelephone = "5142290538",
                            Prenom = "Natalie",
                            UserId = "g4d0a589-2b02-4d36-9a85-39c028a4g4g4",
                            preferenceNotification = 0
                        },
                        new
                        {
                            PatientId = 5,
                            Age = 53,
                            CodePostal = "V9S 1N2",
                            Courriel = "",
                            DateDeNaissance = new DateTime(1971, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Male",
                            NAM = "TREA 1234 4569",
                            Nom = "Tremblay",
                            NumTelephone = "5142290539",
                            Prenom = "Anne",
                            UserId = "g4d0a589-2b02-4d36-9a85-39c028a4g4g5",
                            preferenceNotification = 0
                        },
                        new
                        {
                            PatientId = 6,
                            Age = 28,
                            CodePostal = "C1U 7Y0",
                            Courriel = "",
                            DateDeNaissance = new DateTime(1996, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Male",
                            NAM = "LAVJ 1234 4570",
                            Nom = "Lavoie",
                            NumTelephone = "5142290531",
                            Prenom = "Jean",
                            UserId = "7cc96785-8933-4eac-8d7f-a289b28df226",
                            preferenceNotification = 0
                        },
                        new
                        {
                            PatientId = 7,
                            Age = 33,
                            CodePostal = "T5E 4Z2",
                            Courriel = "",
                            DateDeNaissance = new DateTime(1991, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Male",
                            NAM = "GAGA 1234 4571",
                            Nom = "Gagnon",
                            NumTelephone = "5142290532",
                            Prenom = "Andrew",
                            UserId = "e2b8f367-6c94-4a3e-b5a6-45dabec4d2e7",
                            preferenceNotification = 0
                        },
                        new
                        {
                            PatientId = 8,
                            Age = 42,
                            CodePostal = "E9C 8W3",
                            Courriel = "",
                            DateDeNaissance = new DateTime(1982, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Female",
                            NAM = "GAUJ 1234 4572",
                            Nom = "Gauthier",
                            NumTelephone = "5142290533",
                            Prenom = "Jean",
                            UserId = "f3c9e478-8d81-4aaf-aa77-56e1d3f5f3f38",
                            preferenceNotification = 0
                        },
                        new
                        {
                            PatientId = 9,
                            Age = 29,
                            CodePostal = "H4Z 0C5",
                            Courriel = "",
                            DateDeNaissance = new DateTime(1995, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Male",
                            NAM = "ROYS 1234 4573",
                            Nom = "Roy",
                            NumTelephone = "5142290515",
                            Prenom = "Sophie",
                            UserId = "g4d0a589-2b02-4d36-9a85-39c028a4g4g9",
                            preferenceNotification = 0
                        },
                        new
                        {
                            PatientId = 10,
                            Age = 74,
                            CodePostal = "D2R 4Q3",
                            Courriel = "",
                            DateDeNaissance = new DateTime(1950, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Female",
                            NAM = "GAGJ 1234 4574",
                            Nom = "Gagnon",
                            NumTelephone = "5142290516",
                            Prenom = "Julie",
                            UserId = "g4d0a589-2b02-4d36-9a85-39c028a4g410",
                            preferenceNotification = 0
                        },
                        new
                        {
                            PatientId = 11,
                            Age = 46,
                            CodePostal = "F1G 2H4",
                            Courriel = "",
                            DateDeNaissance = new DateTime(1978, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Male",
                            NAM = "BOUM 1234 4575",
                            Nom = "Bouchard",
                            NumTelephone = "5142290517",
                            Prenom = "Martin",
                            UserId = "7cc96785-8933-4eac-8d7f-a289b28df211",
                            preferenceNotification = 1
                        },
                        new
                        {
                            PatientId = 12,
                            Age = 36,
                            CodePostal = "J3K 5L8",
                            Courriel = "",
                            DateDeNaissance = new DateTime(1988, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Female",
                            NAM = "COUA 1234 4576",
                            Nom = "Couto",
                            NumTelephone = "5142290518",
                            Prenom = "Anne",
                            UserId = "e2b8f367-6c94-4a3e-b5a6-45dabec4d212",
                            preferenceNotification = 1
                        },
                        new
                        {
                            PatientId = 13,
                            Age = 32,
                            CodePostal = "K2L 6M8",
                            Courriel = "",
                            DateDeNaissance = new DateTime(1992, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Female",
                            NAM = "FORJ 1234 4577",
                            Nom = "Fortin",
                            NumTelephone = "5142290519",
                            Prenom = "Julie",
                            UserId = "f3c9e478-8d81-4aaf-aa77-56e1d3f5f313",
                            preferenceNotification = 1
                        },
                        new
                        {
                            PatientId = 14,
                            Age = 30,
                            CodePostal = "X8F 4I7",
                            Courriel = "",
                            DateDeNaissance = new DateTime(1994, 5, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Female",
                            NAM = "FORM 1234 4578",
                            Nom = "Fortin",
                            NumTelephone = "5142290521",
                            Prenom = "Martin",
                            UserId = "g4d0a589-2b02-4d36-9a85-39c028a4g414",
                            preferenceNotification = 1
                        },
                        new
                        {
                            PatientId = 15,
                            Age = 39,
                            CodePostal = "S9K 3Z3",
                            Courriel = "",
                            DateDeNaissance = new DateTime(1985, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Male",
                            NAM = "MORC 1234 4579",
                            Nom = "Morin",
                            NumTelephone = "5142290522",
                            Prenom = "Claire",
                            UserId = "g4d0a589-2b02-4d36-9a85-39c028a4g415",
                            preferenceNotification = 1
                        },
                        new
                        {
                            PatientId = 16,
                            Age = 39,
                            CodePostal = "H3N 3Z8",
                            Courriel = "",
                            DateDeNaissance = new DateTime(1985, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Male",
                            NAM = "ROYC 1234 4580",
                            Nom = "Roy",
                            NumTelephone = "5142290523",
                            Prenom = "Claire",
                            UserId = "7cc96785-8933-4eac-8d7f-a289b28df216",
                            preferenceNotification = 1
                        },
                        new
                        {
                            PatientId = 17,
                            Age = 66,
                            CodePostal = "M1F 6Z2",
                            Courriel = "",
                            DateDeNaissance = new DateTime(1958, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Female",
                            NAM = "GAUL 1234 4581",
                            Nom = "Gauthier",
                            NumTelephone = "5142290524",
                            Prenom = "Louis",
                            UserId = "e2b8f367-6c94-4a3e-b5a6-45dabec4d217",
                            preferenceNotification = 1
                        },
                        new
                        {
                            PatientId = 18,
                            Age = 74,
                            CodePostal = "G3W 7Q1",
                            Courriel = "",
                            DateDeNaissance = new DateTime(1950, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Male",
                            NAM = "COUM 1234 4582",
                            Nom = "Couto",
                            NumTelephone = "5142290525",
                            Prenom = "Marie",
                            UserId = "f3c9e478-8d81-4aaf-aa77-56e1d3f5f318",
                            preferenceNotification = 1
                        },
                        new
                        {
                            PatientId = 19,
                            Age = 49,
                            CodePostal = "D1D 3D9",
                            Courriel = "",
                            DateDeNaissance = new DateTime(1975, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Male",
                            NAM = "MORM 1234 4583",
                            Nom = "Morin",
                            NumTelephone = "5142290526",
                            Prenom = "Michel",
                            UserId = "g4d0a589-2b02-4d36-9a85-39c028a4g419",
                            preferenceNotification = 1
                        },
                        new
                        {
                            PatientId = 20,
                            Age = 69,
                            CodePostal = "M4F 2S8",
                            Courriel = "",
                            DateDeNaissance = new DateTime(1955, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Male",
                            NAM = "ROYM 1234 4584",
                            Nom = "Roy",
                            NumTelephone = "5142290527",
                            Prenom = "Martin",
                            UserId = "g4d0a589-2b02-4d36-9a85-39c028a4g420",
                            preferenceNotification = 1
                        },
                        new
                        {
                            PatientId = 21,
                            Age = 70,
                            CodePostal = "M4F 2S8",
                            Courriel = "",
                            DateDeNaissance = new DateTime(1954, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Male",
                            NAM = "ROYM 1234 4585",
                            Nom = "Roy",
                            NumTelephone = "5142290528",
                            Prenom = "Matheo",
                            UserId = "g4d0a589-2b02-4d36-9a85-39c028a4g421",
                            preferenceNotification = 1
                        });
                });

            modelBuilder.Entity("Clinique2000_Core.Models.PatientACharge", b =>
                {
                    b.Property<int>("PatientAChargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientAChargeId"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDeNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NAM")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PatientAChargeId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientACharges");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.PlageHoraire", b =>
                {
                    b.Property<int>("PlageHoraireID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlageHoraireID"), 1L, 1);

                    b.Property<DateTime>("HeureDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HeureFin")
                        .HasColumnType("datetime2");

                    b.Property<int>("ListeAttenteID")
                        .HasColumnType("int");

                    b.HasKey("PlageHoraireID");

                    b.HasIndex("ListeAttenteID");

                    b.ToTable("PlagesHoraires");

                    b.HasData(
                        new
                        {
                            PlageHoraireID = 1,
                            HeureDebut = new DateTime(2024, 4, 6, 8, 0, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 4, 6, 8, 30, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        },
                        new
                        {
                            PlageHoraireID = 2,
                            HeureDebut = new DateTime(2024, 4, 6, 8, 30, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 4, 6, 9, 0, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        },
                        new
                        {
                            PlageHoraireID = 3,
                            HeureDebut = new DateTime(2024, 4, 6, 9, 0, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 4, 6, 9, 30, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        },
                        new
                        {
                            PlageHoraireID = 4,
                            HeureDebut = new DateTime(2024, 4, 6, 9, 30, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 4, 6, 10, 0, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        },
                        new
                        {
                            PlageHoraireID = 5,
                            HeureDebut = new DateTime(2024, 4, 6, 10, 0, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 4, 6, 10, 30, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        },
                        new
                        {
                            PlageHoraireID = 6,
                            HeureDebut = new DateTime(2024, 4, 6, 10, 30, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 4, 6, 11, 0, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        },
                        new
                        {
                            PlageHoraireID = 7,
                            HeureDebut = new DateTime(2024, 4, 6, 11, 0, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 4, 6, 11, 30, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        },
                        new
                        {
                            PlageHoraireID = 8,
                            HeureDebut = new DateTime(2024, 4, 6, 11, 30, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 4, 6, 12, 0, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        },
                        new
                        {
                            PlageHoraireID = 9,
                            HeureDebut = new DateTime(2024, 4, 6, 12, 0, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 4, 6, 12, 30, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        },
                        new
                        {
                            PlageHoraireID = 10,
                            HeureDebut = new DateTime(2024, 4, 6, 12, 30, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 4, 6, 13, 0, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        },
                        new
                        {
                            PlageHoraireID = 11,
                            HeureDebut = new DateTime(2024, 4, 6, 13, 0, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 4, 6, 13, 30, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        },
                        new
                        {
                            PlageHoraireID = 12,
                            HeureDebut = new DateTime(2024, 4, 6, 17, 0, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 4, 6, 17, 30, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Clinique2000_Core.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("Statut")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "7cc96785-8933-4eac-8d7f-a289b28df223",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39ff2785-78e7-4034-a1f7-6bed6cfbb298",
                            Email = "patient1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT1@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT1@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dfc43121-afd1-481e-8f33-1836ea4f7297",
                            TwoFactorEnabled = false,
                            UserName = "patient1@example.com"
                        },
                        new
                        {
                            Id = "e2b8f367-6c94-4a3e-b5a6-45dabec4d2e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d4ceffc6-d8e7-40e3-892b-9819b731f4a0",
                            Email = "patient2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT2@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT2@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "815f8b77-9e50-45f1-bfce-d3965a277f58",
                            TwoFactorEnabled = false,
                            UserName = "patient2@example.com"
                        },
                        new
                        {
                            Id = "f3c9e478-8d81-4aaf-aa77-56e1d3f5f3f3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53142b1c-e93a-4788-a4bd-16c46ea818f1",
                            Email = "patient3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT3@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT3@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "28a756c5-384f-4f41-baf2-1fc6fb064059",
                            TwoFactorEnabled = false,
                            UserName = "patient3@example.com"
                        },
                        new
                        {
                            Id = "g4d0a589-2b02-4d36-9a85-39c028a4g4g4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90d29523-b24b-4b72-9d22-d95f2dbee1c2",
                            Email = "patient4@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT4@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT4@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07e4ed05-a372-4939-9e58-0094aeeab69d",
                            TwoFactorEnabled = false,
                            UserName = "patient4@example.com"
                        },
                        new
                        {
                            Id = "g4d0a589-2b02-4d36-9a85-39c028a4g4g5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c2ca481d-196d-4817-a786-2a69c9bc7ab5",
                            Email = "patient5@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT5@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT5@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "40913fb1-757d-4fec-a2f7-4040105e2554",
                            TwoFactorEnabled = false,
                            UserName = "patient5@example.com"
                        },
                        new
                        {
                            Id = "7cc96785-8933-4eac-8d7f-a289b28df226",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44f59141-12f6-4e78-85b8-18db01e0ff77",
                            Email = "patient6@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT6@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT6@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae8a334f-ed63-47ee-a8b9-4dff0ff3253d",
                            TwoFactorEnabled = false,
                            UserName = "patient6@example.com"
                        },
                        new
                        {
                            Id = "e2b8f367-6c94-4a3e-b5a6-45dabec4d2e7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "582e78f8-5411-45a3-a01a-f0d7a708cc7a",
                            Email = "patient7@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT7@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT7@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f27db345-9b83-462a-b4e6-7562249ba4b3",
                            TwoFactorEnabled = false,
                            UserName = "patient7@example.com"
                        },
                        new
                        {
                            Id = "f3c9e478-8d81-4aaf-aa77-56e1d3f5f3f38",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59e061de-d4aa-4342-83f3-8a005fa2ea33",
                            Email = "patient8@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT8@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT8@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a56458a8-8f37-4a8e-afd5-b94e65abaaf3",
                            TwoFactorEnabled = false,
                            UserName = "patient8@example.com"
                        },
                        new
                        {
                            Id = "g4d0a589-2b02-4d36-9a85-39c028a4g4g9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "030ac1fb-7baa-430b-83fa-32a7d4a9eb75",
                            Email = "patient9@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT9@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT9@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bf6dd52f-a036-49d3-8848-4e82f2ed0049",
                            TwoFactorEnabled = false,
                            UserName = "patient9@example.com"
                        },
                        new
                        {
                            Id = "g4d0a589-2b02-4d36-9a85-39c028a4g410",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c021492-c191-4892-aeab-48955221568c",
                            Email = "patient10@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT10@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT10@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f36d563-d677-4310-81e1-5158a1b497ba",
                            TwoFactorEnabled = false,
                            UserName = "patient10@example.com"
                        },
                        new
                        {
                            Id = "7cc96785-8933-4eac-8d7f-a289b28df211",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e712285d-fd5a-4bd5-9d0b-2acacefc132c",
                            Email = "patient11@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT11@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT11@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fb1083a3-5afe-48cb-b2e7-460863fa8d1d",
                            TwoFactorEnabled = false,
                            UserName = "patient11@example.com"
                        },
                        new
                        {
                            Id = "e2b8f367-6c94-4a3e-b5a6-45dabec4d212",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7cf06a0f-9f30-40b0-8afd-f0a41c8661c2",
                            Email = "patient12@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT12@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT12@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c32f8acd-2c0a-4b6c-8e1d-5157bc486281",
                            TwoFactorEnabled = false,
                            UserName = "patient12@example.com"
                        },
                        new
                        {
                            Id = "f3c9e478-8d81-4aaf-aa77-56e1d3f5f313",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "607de5cc-c319-421d-88ba-dd7023958e22",
                            Email = "patient13@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT13@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT13@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "176c00a5-5a5c-494e-a1d1-0c39667f84cb",
                            TwoFactorEnabled = false,
                            UserName = "patient13@example.com"
                        },
                        new
                        {
                            Id = "g4d0a589-2b02-4d36-9a85-39c028a4g414",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2297dedc-c57c-4cf6-ba0b-a7f5a7b3ceb9",
                            Email = "patient14@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT14@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT14@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aa9e342c-4e18-4d26-9ab6-510a15b8e982",
                            TwoFactorEnabled = false,
                            UserName = "patient14@example.com"
                        },
                        new
                        {
                            Id = "g4d0a589-2b02-4d36-9a85-39c028a4g415",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "80ca26c8-42e2-41fa-a82b-6cc93e70794d",
                            Email = "patient15@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT15@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT15@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "128ce13a-460e-4c58-94c5-60c8f7b49a59",
                            TwoFactorEnabled = false,
                            UserName = "patient15@example.com"
                        },
                        new
                        {
                            Id = "7cc96785-8933-4eac-8d7f-a289b28df216",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9c1290f-1b99-4f50-962b-fb00297e28cc",
                            Email = "patient16@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT16@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT16@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8aeff8d3-6b55-4d03-85a9-7f7c2a4f0342",
                            TwoFactorEnabled = false,
                            UserName = "patient16@example.com"
                        },
                        new
                        {
                            Id = "e2b8f367-6c94-4a3e-b5a6-45dabec4d217",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30d052ef-26f6-4bbf-9994-3979c690d180",
                            Email = "patient17@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT17@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT17@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9b3f2686-65f5-4d33-a9a2-223de215ffa2",
                            TwoFactorEnabled = false,
                            UserName = "patient17@example.com"
                        },
                        new
                        {
                            Id = "f3c9e478-8d81-4aaf-aa77-56e1d3f5f318",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f08fb593-ddf2-4945-bfd1-638ee8c5a349",
                            Email = "patient18@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT18@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT18@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b41d8d64-c914-449c-b1df-270d27c6b4e3",
                            TwoFactorEnabled = false,
                            UserName = "patient18@example.com"
                        },
                        new
                        {
                            Id = "g4d0a589-2b02-4d36-9a85-39c028a4g419",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e5898f41-62cd-4344-a74d-8beee7b8a350",
                            Email = "patient19@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT19@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT19@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f64dfe3d-d916-4749-99c4-6e28c78fff67",
                            TwoFactorEnabled = false,
                            UserName = "patient19@example.com"
                        },
                        new
                        {
                            Id = "g4d0a589-2b02-4d36-9a85-39c028a4g420",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07563681-ebd6-4a3a-b360-70dcf3d4b68f",
                            Email = "patient20@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT20@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT20@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "11665678-4a15-421d-9474-166fb83fe9e8",
                            TwoFactorEnabled = false,
                            UserName = "patient20@example.com"
                        },
                        new
                        {
                            Id = "g4d0a589-2b02-4d36-9a85-39c028a4g421",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "41c3c1d7-c88b-4229-a494-cd0a2e0d00cd",
                            Email = "patient21@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT21@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT21@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "224b2a3a-dfe3-4a01-8c0f-97a75c250ff6",
                            TwoFactorEnabled = false,
                            UserName = "patient21@example.com"
                        },
                        new
                        {
                            Id = "g4d0a589-2b02-4d36-9a85-39c028a4g22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7c7da7f-1fa3-452b-9be0-8b96129d33a3",
                            Email = "patient22@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT22@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT22@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "da3befd3-bb5c-43f7-98dd-fa0a7bbaa6b9",
                            TwoFactorEnabled = false,
                            UserName = "patient22@example.com"
                        });
                });

            modelBuilder.Entity("Clinique2000_Core.Models.ApiKey", b =>
                {
                    b.HasOne("Clinique2000_Core.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("ApiKey")
                        .HasForeignKey("Clinique2000_Core.Models.ApiKey", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.Clinique", b =>
                {
                    b.HasOne("Clinique2000_Core.Models.Adresse", "Adresse")
                        .WithOne("Clinique")
                        .HasForeignKey("Clinique2000_Core.Models.Clinique", "AdresseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinique2000_Core.Models.ApplicationUser", "Createur")
                        .WithMany("Clinique")
                        .HasForeignKey("CreateurID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adresse");

                    b.Navigation("Createur");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.Consultation", b =>
                {
                    b.HasOne("Clinique2000_Core.Models.DetailsConsultation", "DetailsConsultation")
                        .WithMany()
                        .HasForeignKey("DetailsConsultationId");

                    b.HasOne("Clinique2000_Core.Models.EmployesClinique", "EmployeClinique")
                        .WithMany()
                        .HasForeignKey("EmployeCliniqueID");

                    b.HasOne("Clinique2000_Core.Models.ListeAttente", null)
                        .WithMany("Consultations")
                        .HasForeignKey("ListeAttenteID");

                    b.HasOne("Clinique2000_Core.Models.PatientACharge", null)
                        .WithMany("ConsultationsPAC")
                        .HasForeignKey("PatientAChargeId");

                    b.HasOne("Clinique2000_Core.Models.Patient", "Patient")
                        .WithMany("Consultations")
                        .HasForeignKey("PatientID");

                    b.HasOne("Clinique2000_Core.Models.PlageHoraire", "PlageHoraire")
                        .WithMany("Consultations")
                        .HasForeignKey("PlageHoraireID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DetailsConsultation");

                    b.Navigation("EmployeClinique");

                    b.Navigation("Patient");

                    b.Navigation("PlageHoraire");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.Critique", b =>
                {
                    b.HasOne("Clinique2000_Core.Models.Clinique", "Clinique")
                        .WithMany("Critiques")
                        .HasForeignKey("CliniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinique2000_Core.Models.Patient", "Patient")
                        .WithMany("Critiques")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Clinique");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.EmployesClinique", b =>
                {
                    b.HasOne("Clinique2000_Core.Models.Clinique", "Clinique")
                        .WithMany("EmployesCliniques")
                        .HasForeignKey("CliniqueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinique2000_Core.Models.ApplicationUser", "User")
                        .WithMany("EmployesCliniques")
                        .HasForeignKey("UserID");

                    b.Navigation("Clinique");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.ListeAttente", b =>
                {
                    b.HasOne("Clinique2000_Core.Models.Clinique", "Clinique")
                        .WithMany("ListeAttente")
                        .HasForeignKey("CliniqueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinique");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.Patient", b =>
                {
                    b.HasOne("Clinique2000_Core.Models.ApplicationUser", "User")
                        .WithOne("Patient")
                        .HasForeignKey("Clinique2000_Core.Models.Patient", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.PatientACharge", b =>
                {
                    b.HasOne("Clinique2000_Core.Models.Patient", "Patient")
                        .WithMany("PatientsACharge")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.PlageHoraire", b =>
                {
                    b.HasOne("Clinique2000_Core.Models.ListeAttente", "ListeAttente")
                        .WithMany("PlagesHoraires")
                        .HasForeignKey("ListeAttenteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ListeAttente");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Clinique2000_Core.Models.Adresse", b =>
                {
                    b.Navigation("Clinique")
                        .IsRequired();
                });

            modelBuilder.Entity("Clinique2000_Core.Models.Clinique", b =>
                {
                    b.Navigation("Critiques");

                    b.Navigation("EmployesCliniques");

                    b.Navigation("ListeAttente");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.ListeAttente", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("PlagesHoraires");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.Patient", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("Critiques");

                    b.Navigation("PatientsACharge");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.PatientACharge", b =>
                {
                    b.Navigation("ConsultationsPAC");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.PlageHoraire", b =>
                {
                    b.Navigation("Consultations");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApiKey")
                        .IsRequired();

                    b.Navigation("Clinique");

                    b.Navigation("EmployesCliniques");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
