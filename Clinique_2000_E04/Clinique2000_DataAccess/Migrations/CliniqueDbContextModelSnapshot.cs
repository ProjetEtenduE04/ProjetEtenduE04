// <auto-generated />
using System;
using Clinique2000_DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Clinique2000_DataAccess.Migrations
{
    [DbContext(typeof(CliniqueDbContext))]
    partial class CliniqueDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Clinique2000_Core.Models.Adresse", b =>
                {
                    b.Property<int>("AdresseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdresseID"), 1L, 1);

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Rue")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("AdresseID");

                    b.ToTable("Adresses");

                    b.HasData(
                        new
                        {
                            AdresseID = 1,
                            CodePostal = "J4G 2M6",
                            Numero = "505",
                            Pays = "Canada",
                            Province = "Québec",
                            Rue = "Rue Adoncour",
                            Ville = "Longueuil"
                        },
                        new
                        {
                            AdresseID = 2,
                            CodePostal = "J4M 2X1",
                            Numero = "1615",
                            Pays = "Canada",
                            Province = "Québec",
                            Rue = "Blvd Jacques-Cartier",
                            Ville = "Longueuil"
                        },
                        new
                        {
                            AdresseID = 3,
                            CodePostal = "J4K 1E2",
                            Numero = "1144",
                            Pays = "Canada",
                            Province = "Québec",
                            Rue = "Rue Saint-Laurent",
                            Ville = "Longueuil"
                        },
                        new
                        {
                            AdresseID = 4,
                            CodePostal = "J4V 2H2",
                            Numero = "3141",
                            Pays = "Canada",
                            Province = "Québec",
                            Rue = "Blvd Taschereau",
                            Ville = "Longueuil"
                        },
                        new
                        {
                            AdresseID = 5,
                            CodePostal = "H3B 4G1",
                            Numero = "895",
                            Pays = "Canada",
                            Province = "Québec",
                            Rue = "Rue De la Gauchetiére",
                            Ville = "Montreal"
                        },
                        new
                        {
                            AdresseID = 6,
                            CodePostal = "J3Y 3P5",
                            Numero = "5580",
                            Pays = "Canada",
                            Province = "Québec",
                            Rue = " Ch. de Chambly B",
                            Ville = "Saint-Hubert"
                        });
                });

            modelBuilder.Entity("Clinique2000_Core.Models.AdressesQuebec", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProvinceAbbr")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int>("TimeZone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AdressesQuebec");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.Clinique", b =>
                {
                    b.Property<int>("CliniqueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CliniqueID"), 1L, 1);

                    b.Property<int>("AdresseID")
                        .HasColumnType("int");

                    b.Property<string>("Courriel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreateurID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EstActive")
                        .HasColumnType("bit");

                    b.Property<bool>("EstApprouvee")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("HeureFermeture")
                        .IsRequired()
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("HeureOuverture")
                        .IsRequired()
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("HeurePauseDebut")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("HeurePauseFin")
                        .HasColumnType("time");

                    b.Property<string>("NomClinique")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumTelephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TempsMoyenConsultation")
                        .HasColumnType("int");

                    b.HasKey("CliniqueID");

                    b.HasIndex("AdresseID")
                        .IsUnique();

                    b.HasIndex("CreateurID");

                    b.ToTable("Cliniques");

                    b.HasData(
                        new
                        {
                            CliniqueID = 1,
                            AdresseID = 1,
                            Courriel = "contact@adoncour.ca",
                            CreateurID = "7cc96785-8933-4eac-8d7f-a289b28df223",
                            DateCreation = new DateTime(2024, 3, 20, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4610),
                            EstActive = true,
                            EstApprouvee = true,
                            HeureFermeture = new TimeSpan(0, 15, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 12, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 13, 0, 0, 0),
                            NomClinique = "Clinique Adoncour",
                            NumTelephone = "(450) 646-4445",
                            TempsMoyenConsultation = 30
                        },
                        new
                        {
                            CliniqueID = 2,
                            AdresseID = 2,
                            Courriel = "contact@pboucher.ca",
                            CreateurID = "7cc96785-8933-4eac-8d7f-a289b28df223",
                            DateCreation = new DateTime(2024, 3, 20, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4657),
                            EstActive = true,
                            EstApprouvee = true,
                            HeureFermeture = new TimeSpan(0, 22, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 12, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 13, 0, 0, 0),
                            NomClinique = "Clinique Pierre-Boucher",
                            NumTelephone = "(450) 468-6223",
                            TempsMoyenConsultation = 30
                        },
                        new
                        {
                            CliniqueID = 3,
                            AdresseID = 3,
                            Courriel = "contact@camu.ca",
                            CreateurID = "7cc96785-8933-4eac-8d7f-a289b28df223",
                            DateCreation = new DateTime(2024, 3, 20, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4661),
                            EstActive = true,
                            EstApprouvee = false,
                            HeureFermeture = new TimeSpan(0, 18, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 12, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 13, 0, 0, 0),
                            NomClinique = "Clinique Medicale Urgence Camu",
                            NumTelephone = "(450) 679-4333",
                            TempsMoyenConsultation = 20
                        },
                        new
                        {
                            CliniqueID = 4,
                            AdresseID = 4,
                            Courriel = "contact@cigogne.ca",
                            CreateurID = "7cc96785-8933-4eac-8d7f-a289b28df223",
                            DateCreation = new DateTime(2024, 3, 20, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4663),
                            EstActive = true,
                            EstApprouvee = false,
                            HeureFermeture = new TimeSpan(0, 20, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 12, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 13, 0, 0, 0),
                            NomClinique = "Medical Clinic GMF La Cigogne",
                            NumTelephone = "(450) 466-7892",
                            TempsMoyenConsultation = 40
                        },
                        new
                        {
                            CliniqueID = 5,
                            AdresseID = 5,
                            Courriel = "contact@cmenroute.ca",
                            CreateurID = "7cc96785-8933-4eac-8d7f-a289b28df223",
                            DateCreation = new DateTime(2024, 3, 20, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4666),
                            EstActive = true,
                            EstApprouvee = false,
                            HeureFermeture = new TimeSpan(0, 16, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 12, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 13, 0, 0, 0),
                            NomClinique = "Clinique Medicale en Route",
                            NumTelephone = "(514) 954-1444",
                            TempsMoyenConsultation = 10
                        },
                        new
                        {
                            CliniqueID = 6,
                            AdresseID = 6,
                            Courriel = "contact@chambly.com",
                            CreateurID = "7cc96785-8933-4eac-8d7f-a289b28df223",
                            DateCreation = new DateTime(2024, 3, 20, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4668),
                            EstActive = true,
                            EstApprouvee = false,
                            HeureFermeture = new TimeSpan(0, 16, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 12, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 13, 0, 0, 0),
                            NomClinique = "Centre Médical Chambly Latour",
                            NumTelephone = "(450) 926-2236",
                            TempsMoyenConsultation = 15
                        });
                });

            modelBuilder.Entity("Clinique2000_Core.Models.CliniqueRefusee", b =>
                {
                    b.Property<int>("CliniqueRefuseeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CliniqueRefuseeID"), 1L, 1);

                    b.Property<int>("AdresseID")
                        .HasColumnType("int");

                    b.Property<string>("Courriel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreateurID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EstActive")
                        .HasColumnType("bit");

                    b.Property<bool>("EstApprouvee")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("HeureFermeture")
                        .IsRequired()
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("HeureOuverture")
                        .IsRequired()
                        .HasColumnType("time");

                    b.Property<string>("NomClinique")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumTelephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TempsMoyenConsultation")
                        .HasColumnType("int");

                    b.HasKey("CliniqueRefuseeID");

                    b.HasIndex("AdresseID");

                    b.HasIndex("CreateurID");

                    b.ToTable("CliniqueRefusees");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.Consultation", b =>
                {
                    b.Property<int>("ConsultationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultationID"), 1L, 1);

                    b.Property<int?>("DetailsConsultationId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeCliniqueID")
                        .HasColumnType("int");

                    b.Property<DateTime>("HeureDateDebutPrevue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HeureDateDebutReele")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HeureDateFinPrevue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HeureDateFinReele")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ListeAttenteID")
                        .HasColumnType("int");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<int?>("PlageHoraireID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("StatutConsultation")
                        .HasColumnType("int");

                    b.HasKey("ConsultationID");

                    b.HasIndex("DetailsConsultationId");

                    b.HasIndex("EmployeCliniqueID");

                    b.HasIndex("ListeAttenteID");

                    b.HasIndex("PatientID");

                    b.HasIndex("PlageHoraireID");

                    b.ToTable("Consultations");

                    b.HasData(
                        new
                        {
                            ConsultationID = 1,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 8, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 8, 30, 0, 0, DateTimeKind.Local),
                            PatientID = 1,
                            PlageHoraireID = 1,
                            StatutConsultation = 2
                        },
                        new
                        {
                            ConsultationID = 2,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 8, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 8, 30, 0, 0, DateTimeKind.Local),
                            PatientID = 2,
                            PlageHoraireID = 1,
                            StatutConsultation = 2
                        },
                        new
                        {
                            ConsultationID = 3,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 8, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 9, 0, 0, 0, DateTimeKind.Local),
                            PatientID = 3,
                            PlageHoraireID = 2,
                            StatutConsultation = 2
                        },
                        new
                        {
                            ConsultationID = 4,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 8, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 9, 0, 0, 0, DateTimeKind.Local),
                            PatientID = 4,
                            PlageHoraireID = 2,
                            StatutConsultation = 2
                        },
                        new
                        {
                            ConsultationID = 5,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 9, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 9, 30, 0, 0, DateTimeKind.Local),
                            PatientID = 5,
                            PlageHoraireID = 3,
                            StatutConsultation = 2
                        },
                        new
                        {
                            ConsultationID = 6,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 9, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 9, 30, 0, 0, DateTimeKind.Local),
                            PatientID = 6,
                            PlageHoraireID = 3,
                            StatutConsultation = 2
                        },
                        new
                        {
                            ConsultationID = 7,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 9, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 10, 0, 0, 0, DateTimeKind.Local),
                            PatientID = 7,
                            PlageHoraireID = 4,
                            StatutConsultation = 2
                        },
                        new
                        {
                            ConsultationID = 8,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 9, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 10, 0, 0, 0, DateTimeKind.Local),
                            PatientID = 8,
                            PlageHoraireID = 4,
                            StatutConsultation = 2
                        },
                        new
                        {
                            ConsultationID = 9,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 10, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 10, 30, 0, 0, DateTimeKind.Local),
                            PatientID = 9,
                            PlageHoraireID = 5,
                            StatutConsultation = 2
                        },
                        new
                        {
                            ConsultationID = 10,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 10, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 10, 30, 0, 0, DateTimeKind.Local),
                            PatientID = 10,
                            PlageHoraireID = 5,
                            StatutConsultation = 2
                        },
                        new
                        {
                            ConsultationID = 11,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 10, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 11, 0, 0, 0, DateTimeKind.Local),
                            PatientID = 11,
                            PlageHoraireID = 6,
                            StatutConsultation = 2
                        },
                        new
                        {
                            ConsultationID = 12,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 10, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 11, 0, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 6,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 13,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 11, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 11, 30, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 7,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 14,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 11, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 11, 30, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 7,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 15,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 12, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 12, 30, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 8,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 16,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 12, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 12, 30, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 8,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 17,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 12, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 13, 0, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 9,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 18,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 12, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 13, 0, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 9,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 19,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 13, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 13, 30, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 10,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 20,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 13, 0, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 13, 30, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 10,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 21,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 13, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 14, 0, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 11,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 22,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 13, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 14, 0, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 11,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 23,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 15, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 15, 0, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 12,
                            StatutConsultation = 6
                        },
                        new
                        {
                            ConsultationID = 24,
                            HeureDateDebutPrevue = new DateTime(2024, 3, 21, 16, 30, 0, 0, DateTimeKind.Local),
                            HeureDateFinPrevue = new DateTime(2024, 3, 21, 17, 0, 0, 0, DateTimeKind.Local),
                            PlageHoraireID = 12,
                            StatutConsultation = 6
                        });
                });

            modelBuilder.Entity("Clinique2000_Core.Models.Critique", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<int>("CliniqueId")
                        .HasColumnType("int");

                    b.Property<int>("Note")
                        .HasColumnType("int");

                    b.Property<string>("Texte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReviewId");

                    b.HasIndex("CliniqueId");

                    b.ToTable("Critiques");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.DetailsConsultation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Diagnostic")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("EstAlergique")
                        .HasColumnType("bit");

                    b.Property<string>("MedicamentsPrescrits")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("MotifRendezVous")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Symptomes")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("DetailsConsultation");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.EmployesClinique", b =>
                {
                    b.Property<int>("EmployeCliniqueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeCliniqueID"), 1L, 1);

                    b.Property<int>("CliniqueID")
                        .HasColumnType("int");

                    b.Property<int?>("CliniqueRefuseeID")
                        .HasColumnType("int");

                    b.Property<string>("EmployeCliniqueCourriel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeCliniqueNom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeCliniquePosition")
                        .HasColumnType("int");

                    b.Property<string>("EmployeCliniquePrenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EmployeCliniqueID");

                    b.HasIndex("CliniqueID");

                    b.HasIndex("CliniqueRefuseeID");

                    b.HasIndex("UserID");

                    b.ToTable("EmployesClinique");

                    b.HasData(
                        new
                        {
                            EmployeCliniqueID = 1,
                            CliniqueID = 1,
                            EmployeCliniqueCourriel = "numcliniquetest@gmail.com",
                            EmployeCliniqueNom = "Tremblay",
                            EmployeCliniquePosition = 0,
                            EmployeCliniquePrenom = "Mark"
                        },
                        new
                        {
                            EmployeCliniqueID = 2,
                            CliniqueID = 1,
                            EmployeCliniqueCourriel = "testproject2132@gmail.com",
                            EmployeCliniqueNom = "Dubois",
                            EmployeCliniquePosition = 0,
                            EmployeCliniquePrenom = "Monique"
                        },
                        new
                        {
                            EmployeCliniqueID = 3,
                            CliniqueID = 1,
                            EmployeCliniqueCourriel = "sylviebeton98@gmail.com",
                            EmployeCliniqueNom = "Beton",
                            EmployeCliniquePosition = 1,
                            EmployeCliniquePrenom = "Sylvie"
                        },
                        new
                        {
                            EmployeCliniqueID = 4,
                            CliniqueID = 1,
                            EmployeCliniqueCourriel = "clinique597@gmail.com",
                            EmployeCliniqueNom = "Bostan",
                            EmployeCliniquePosition = 1,
                            EmployeCliniquePrenom = "Max"
                        });
                });

            modelBuilder.Entity("Clinique2000_Core.Models.ListeAttente", b =>
                {
                    b.Property<int>("ListeAttenteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ListeAttenteID"), 1L, 1);

                    b.Property<int>("CliniqueID")
                        .HasColumnType("int");

                    b.Property<int?>("CliniqueRefuseeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEffectivite")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("HeureFermeture")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HeureOuverture")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HeurePauseDebut")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HeurePauseFin")
                        .HasColumnType("time");

                    b.Property<bool>("IsOuverte")
                        .HasColumnType("bit");

                    b.Property<int>("NbMedecinsDispo")
                        .HasColumnType("int");

                    b.HasKey("ListeAttenteID");

                    b.HasIndex("CliniqueID");

                    b.HasIndex("CliniqueRefuseeID");

                    b.ToTable("ListeAttentes");

                    b.HasData(
                        new
                        {
                            ListeAttenteID = 1,
                            CliniqueID = 1,
                            DateEffectivite = new DateTime(2024, 3, 21, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4730),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 2,
                            CliniqueID = 2,
                            DateEffectivite = new DateTime(2024, 3, 21, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4743),
                            HeureFermeture = new TimeSpan(0, 8, 30, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 1
                        },
                        new
                        {
                            ListeAttenteID = 3,
                            CliniqueID = 3,
                            DateEffectivite = new DateTime(2024, 3, 21, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4752),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 4,
                            CliniqueID = 4,
                            DateEffectivite = new DateTime(2024, 3, 21, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4760),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 3
                        },
                        new
                        {
                            ListeAttenteID = 5,
                            CliniqueID = 5,
                            DateEffectivite = new DateTime(2024, 3, 21, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4767),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 6,
                            CliniqueID = 6,
                            DateEffectivite = new DateTime(2024, 3, 21, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4775),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 3
                        },
                        new
                        {
                            ListeAttenteID = 7,
                            CliniqueID = 2,
                            DateEffectivite = new DateTime(2024, 3, 22, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4783),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 8,
                            CliniqueID = 2,
                            DateEffectivite = new DateTime(2024, 3, 22, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4831),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 3
                        },
                        new
                        {
                            ListeAttenteID = 9,
                            CliniqueID = 3,
                            DateEffectivite = new DateTime(2024, 3, 22, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4841),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 10,
                            CliniqueID = 4,
                            DateEffectivite = new DateTime(2024, 3, 24, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4849),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 3
                        },
                        new
                        {
                            ListeAttenteID = 11,
                            CliniqueID = 4,
                            DateEffectivite = new DateTime(2024, 3, 25, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4860),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = false,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 12,
                            CliniqueID = 4,
                            DateEffectivite = new DateTime(2024, 3, 26, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4872),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = false,
                            NbMedecinsDispo = 3
                        },
                        new
                        {
                            ListeAttenteID = 13,
                            CliniqueID = 5,
                            DateEffectivite = new DateTime(2024, 3, 23, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4886),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 14,
                            CliniqueID = 6,
                            DateEffectivite = new DateTime(2024, 3, 24, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4899),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 3
                        },
                        new
                        {
                            ListeAttenteID = 15,
                            CliniqueID = 1,
                            DateEffectivite = new DateTime(2024, 3, 23, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4911),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = false,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 16,
                            CliniqueID = 5,
                            DateEffectivite = new DateTime(2024, 3, 24, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4923),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 3
                        },
                        new
                        {
                            ListeAttenteID = 17,
                            CliniqueID = 5,
                            DateEffectivite = new DateTime(2024, 3, 25, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4936),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = false,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 18,
                            CliniqueID = 5,
                            DateEffectivite = new DateTime(2024, 3, 26, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4968),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = false,
                            NbMedecinsDispo = 3
                        },
                        new
                        {
                            ListeAttenteID = 19,
                            CliniqueID = 6,
                            DateEffectivite = new DateTime(2024, 3, 21, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4982),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 20,
                            CliniqueID = 6,
                            DateEffectivite = new DateTime(2024, 3, 22, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(4994),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 3
                        },
                        new
                        {
                            ListeAttenteID = 21,
                            CliniqueID = 6,
                            DateEffectivite = new DateTime(2024, 3, 23, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(5012),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 22,
                            CliniqueID = 6,
                            DateEffectivite = new DateTime(2024, 3, 24, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(5025),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = true,
                            NbMedecinsDispo = 3
                        },
                        new
                        {
                            ListeAttenteID = 23,
                            CliniqueID = 6,
                            DateEffectivite = new DateTime(2024, 3, 25, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(5032),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = false,
                            NbMedecinsDispo = 2
                        },
                        new
                        {
                            ListeAttenteID = 24,
                            CliniqueID = 6,
                            DateEffectivite = new DateTime(2024, 3, 26, 15, 21, 30, 469, DateTimeKind.Local).AddTicks(5039),
                            HeureFermeture = new TimeSpan(0, 17, 0, 0, 0),
                            HeureOuverture = new TimeSpan(0, 8, 0, 0, 0),
                            HeurePauseDebut = new TimeSpan(0, 0, 0, 0, 0),
                            HeurePauseFin = new TimeSpan(0, 0, 0, 0, 0),
                            IsOuverte = false,
                            NbMedecinsDispo = 3
                        });
                });

            modelBuilder.Entity("Clinique2000_Core.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("DateDeNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NAM")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PatientId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            Age = 32,
                            CodePostal = "J4J 1Z4",
                            DateDeNaissance = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Masculin",
                            NAM = "EASC 2342 4332",
                            Nom = "Eastwood",
                            Prenom = "Clint",
                            UserId = "7cc96785-8933-4eac-8d7f-a289b28df223"
                        },
                        new
                        {
                            PatientId = 2,
                            Age = 27,
                            CodePostal = "J4J 1V2",
                            DateDeNaissance = new DateTime(1995, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Féminin",
                            NAM = "BLUE 4232 4332",
                            Nom = "Blunt",
                            Prenom = "Emily",
                            UserId = "e2b8f367-6c94-4a3e-b5a6-45dabec4d2e2"
                        },
                        new
                        {
                            PatientId = 3,
                            Age = 36,
                            CodePostal = "J4J 1G4",
                            DateDeNaissance = new DateTime(1985, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Masculin",
                            NAM = "MARB 3244 2233",
                            Nom = "Brando",
                            Prenom = "Marlon",
                            UserId = "f3c9e478-8d81-4aaf-aa77-56e1d3f5f3f3"
                        },
                        new
                        {
                            PatientId = 4,
                            Age = 44,
                            CodePostal = "J4J 1H6",
                            DateDeNaissance = new DateTime(1980, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Féminin",
                            NAM = "PORT 3443 3433",
                            Nom = "Portman",
                            Prenom = "Natalie",
                            UserId = "g4d0a589-2b02-4d36-9a85-39c028a4g4g4"
                        },
                        new
                        {
                            PatientId = 5,
                            Age = 53,
                            CodePostal = "V9S 1N2",
                            DateDeNaissance = new DateTime(1971, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Male",
                            NAM = "TREA 1234 4569",
                            Nom = "Tremblay",
                            Prenom = "Anne",
                            UserId = "g4d0a589-2b02-4d36-9a85-39c028a4g4g5"
                        },
                        new
                        {
                            PatientId = 6,
                            Age = 28,
                            CodePostal = "C1U 7Y0",
                            DateDeNaissance = new DateTime(1996, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Male",
                            NAM = "LAVJ 1234 4570",
                            Nom = "Lavoie",
                            Prenom = "Jean",
                            UserId = "7cc96785-8933-4eac-8d7f-a289b28df226"
                        },
                        new
                        {
                            PatientId = 7,
                            Age = 33,
                            CodePostal = "T5E 4Z2",
                            DateDeNaissance = new DateTime(1991, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Male",
                            NAM = "GAGA 1234 4571",
                            Nom = "Gagnon",
                            Prenom = "Andrew",
                            UserId = "e2b8f367-6c94-4a3e-b5a6-45dabec4d2e7"
                        },
                        new
                        {
                            PatientId = 8,
                            Age = 42,
                            CodePostal = "E9C 8W3",
                            DateDeNaissance = new DateTime(1982, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Female",
                            NAM = "GAUJ 1234 4572",
                            Nom = "Gauthier",
                            Prenom = "Jean",
                            UserId = "f3c9e478-8d81-4aaf-aa77-56e1d3f5f3f38"
                        },
                        new
                        {
                            PatientId = 9,
                            Age = 29,
                            CodePostal = "H4Z 0C5",
                            DateDeNaissance = new DateTime(1995, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Male",
                            NAM = "ROYS 1234 4573",
                            Nom = "Roy",
                            Prenom = "Sophie",
                            UserId = "g4d0a589-2b02-4d36-9a85-39c028a4g4g9"
                        },
                        new
                        {
                            PatientId = 10,
                            Age = 74,
                            CodePostal = "D2R 4Q3",
                            DateDeNaissance = new DateTime(1950, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Female",
                            NAM = "GAGJ 1234 4574",
                            Nom = "Gagnon",
                            Prenom = "Julie",
                            UserId = "g4d0a589-2b02-4d36-9a85-39c028a4g410"
                        },
                        new
                        {
                            PatientId = 11,
                            Age = 46,
                            CodePostal = "F1G 2H4",
                            DateDeNaissance = new DateTime(1978, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Male",
                            NAM = "BOUM 1234 4575",
                            Nom = "Bouchard",
                            Prenom = "Martin",
                            UserId = "7cc96785-8933-4eac-8d7f-a289b28df211"
                        },
                        new
                        {
                            PatientId = 12,
                            Age = 36,
                            CodePostal = "J3K 5L8",
                            DateDeNaissance = new DateTime(1988, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Female",
                            NAM = "COUA 1234 4576",
                            Nom = "Couto",
                            Prenom = "Anne",
                            UserId = "e2b8f367-6c94-4a3e-b5a6-45dabec4d212"
                        },
                        new
                        {
                            PatientId = 13,
                            Age = 32,
                            CodePostal = "K2L 6M8",
                            DateDeNaissance = new DateTime(1992, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Female",
                            NAM = "FORJ 1234 4577",
                            Nom = "Fortin",
                            Prenom = "Julie",
                            UserId = "f3c9e478-8d81-4aaf-aa77-56e1d3f5f313"
                        },
                        new
                        {
                            PatientId = 14,
                            Age = 30,
                            CodePostal = "X8F 4I7",
                            DateDeNaissance = new DateTime(1994, 5, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Female",
                            NAM = "FORM 1234 4578",
                            Nom = "Fortin",
                            Prenom = "Martin",
                            UserId = "g4d0a589-2b02-4d36-9a85-39c028a4g414"
                        },
                        new
                        {
                            PatientId = 15,
                            Age = 39,
                            CodePostal = "S9K 3Z3",
                            DateDeNaissance = new DateTime(1985, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Male",
                            NAM = "MORC 1234 4579",
                            Nom = "Morin",
                            Prenom = "Claire",
                            UserId = "g4d0a589-2b02-4d36-9a85-39c028a4g415"
                        },
                        new
                        {
                            PatientId = 16,
                            Age = 39,
                            CodePostal = "H3N 3Z8",
                            DateDeNaissance = new DateTime(1985, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Male",
                            NAM = "ROYC 1234 4580",
                            Nom = "Roy",
                            Prenom = "Claire",
                            UserId = "7cc96785-8933-4eac-8d7f-a289b28df216"
                        },
                        new
                        {
                            PatientId = 17,
                            Age = 66,
                            CodePostal = "M1F 6Z2",
                            DateDeNaissance = new DateTime(1958, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Female",
                            NAM = "GAUL 1234 4581",
                            Nom = "Gauthier",
                            Prenom = "Louis",
                            UserId = "e2b8f367-6c94-4a3e-b5a6-45dabec4d217"
                        },
                        new
                        {
                            PatientId = 18,
                            Age = 74,
                            CodePostal = "G3W 7Q1",
                            DateDeNaissance = new DateTime(1950, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Male",
                            NAM = "COUM 1234 4582",
                            Nom = "Couto",
                            Prenom = "Marie",
                            UserId = "f3c9e478-8d81-4aaf-aa77-56e1d3f5f318"
                        },
                        new
                        {
                            PatientId = 19,
                            Age = 49,
                            CodePostal = "D1D 3D9",
                            DateDeNaissance = new DateTime(1975, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Male",
                            NAM = "MORM 1234 4583",
                            Nom = "Morin",
                            Prenom = "Michel",
                            UserId = "g4d0a589-2b02-4d36-9a85-39c028a4g419"
                        },
                        new
                        {
                            PatientId = 20,
                            Age = 69,
                            CodePostal = "M4F 2S8",
                            DateDeNaissance = new DateTime(1955, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Male",
                            NAM = "ROYM 1234 4584",
                            Nom = "Roy",
                            Prenom = "Martin",
                            UserId = "g4d0a589-2b02-4d36-9a85-39c028a4g420"
                        },
                        new
                        {
                            PatientId = 21,
                            Age = 70,
                            CodePostal = "M4F 2S8",
                            DateDeNaissance = new DateTime(1954, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = "Male",
                            NAM = "ROYM 1234 4585",
                            Nom = "Roy",
                            Prenom = "Matheo",
                            UserId = "g4d0a589-2b02-4d36-9a85-39c028a4g421"
                        });
                });

            modelBuilder.Entity("Clinique2000_Core.Models.PatientACharge", b =>
                {
                    b.Property<int>("PatientAChargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientAChargeId"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDeNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("NAM")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("PatientAChargeId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientACharges");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.PlageHoraire", b =>
                {
                    b.Property<int>("PlageHoraireID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlageHoraireID"), 1L, 1);

                    b.Property<DateTime>("HeureDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HeureFin")
                        .HasColumnType("datetime2");

                    b.Property<int>("ListeAttenteID")
                        .HasColumnType("int");

                    b.HasKey("PlageHoraireID");

                    b.HasIndex("ListeAttenteID");

                    b.ToTable("PlagesHoraires");

                    b.HasData(
                        new
                        {
                            PlageHoraireID = 1,
                            HeureDebut = new DateTime(2024, 3, 21, 8, 0, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 3, 21, 8, 30, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        },
                        new
                        {
                            PlageHoraireID = 2,
                            HeureDebut = new DateTime(2024, 3, 21, 8, 30, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 3, 21, 9, 0, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        },
                        new
                        {
                            PlageHoraireID = 3,
                            HeureDebut = new DateTime(2024, 3, 21, 9, 0, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 3, 21, 9, 30, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        },
                        new
                        {
                            PlageHoraireID = 4,
                            HeureDebut = new DateTime(2024, 3, 21, 9, 30, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 3, 21, 10, 0, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        },
                        new
                        {
                            PlageHoraireID = 5,
                            HeureDebut = new DateTime(2024, 3, 21, 10, 0, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 3, 21, 10, 30, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        },
                        new
                        {
                            PlageHoraireID = 6,
                            HeureDebut = new DateTime(2024, 3, 21, 10, 30, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 3, 21, 11, 0, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        },
                        new
                        {
                            PlageHoraireID = 7,
                            HeureDebut = new DateTime(2024, 3, 21, 11, 0, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 3, 21, 11, 30, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        },
                        new
                        {
                            PlageHoraireID = 8,
                            HeureDebut = new DateTime(2024, 3, 21, 11, 30, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 3, 21, 12, 0, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        },
                        new
                        {
                            PlageHoraireID = 9,
                            HeureDebut = new DateTime(2024, 3, 21, 12, 0, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 3, 21, 12, 30, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        },
                        new
                        {
                            PlageHoraireID = 10,
                            HeureDebut = new DateTime(2024, 3, 21, 12, 30, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 3, 21, 13, 0, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        },
                        new
                        {
                            PlageHoraireID = 11,
                            HeureDebut = new DateTime(2024, 3, 21, 13, 0, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 3, 21, 13, 30, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        },
                        new
                        {
                            PlageHoraireID = 12,
                            HeureDebut = new DateTime(2024, 3, 21, 17, 0, 0, 0, DateTimeKind.Local),
                            HeureFin = new DateTime(2024, 3, 21, 17, 30, 0, 0, DateTimeKind.Local),
                            ListeAttenteID = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Clinique2000_Core.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<bool>("EstApprouvee")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "7cc96785-8933-4eac-8d7f-a289b28df223",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3616adaa-a84d-4b4a-ad89-81b4a81da99c",
                            Email = "patient1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT1@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT1@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e87f680-fef4-4153-8805-e3b4a2a2e6a8",
                            TwoFactorEnabled = false,
                            UserName = "patient1@example.com",
                            EstApprouvee = false
                        },
                        new
                        {
                            Id = "e2b8f367-6c94-4a3e-b5a6-45dabec4d2e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83f8607c-c6c7-4f46-906d-0584645745e8",
                            Email = "patient2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT2@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT2@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ccf671c4-addf-475c-9715-c42eb0c23419",
                            TwoFactorEnabled = false,
                            UserName = "patient2@example.com",
                            EstApprouvee = false
                        },
                        new
                        {
                            Id = "f3c9e478-8d81-4aaf-aa77-56e1d3f5f3f3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27f2498d-2d21-49e0-8db8-895f9785f98e",
                            Email = "patient3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT3@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT3@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0025a9da-a59c-4425-acbc-af465ad29620",
                            TwoFactorEnabled = false,
                            UserName = "patient3@example.com",
                            EstApprouvee = false
                        },
                        new
                        {
                            Id = "g4d0a589-2b02-4d36-9a85-39c028a4g4g4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "86990f41-b4ec-469a-8cb7-1b4b7788c994",
                            Email = "patient4@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT4@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT4@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3afb3ae0-f7cf-4ef2-b529-1ba670198d76",
                            TwoFactorEnabled = false,
                            UserName = "patient4@example.com",
                            EstApprouvee = false
                        },
                        new
                        {
                            Id = "g4d0a589-2b02-4d36-9a85-39c028a4g4g5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57d2d6ec-e501-4674-b905-9e6ab21d9eac",
                            Email = "patient5@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT5@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT5@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ea01085-2078-453c-9d57-318b283c438f",
                            TwoFactorEnabled = false,
                            UserName = "patient5@example.com",
                            EstApprouvee = false
                        },
                        new
                        {
                            Id = "7cc96785-8933-4eac-8d7f-a289b28df226",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9bc3991b-813c-4455-a8aa-c36113659d58",
                            Email = "patient6@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT6@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT6@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8205da1d-d06f-4fad-bd4a-333838f7ef25",
                            TwoFactorEnabled = false,
                            UserName = "patient6@example.com",
                            EstApprouvee = false
                        },
                        new
                        {
                            Id = "e2b8f367-6c94-4a3e-b5a6-45dabec4d2e7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3eaedb54-fd86-4994-9843-e19061fbbe0a",
                            Email = "patient7@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT7@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT7@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "03df9991-7b3b-4d65-a4cc-924871741e06",
                            TwoFactorEnabled = false,
                            UserName = "patient7@example.com",
                            EstApprouvee = false
                        },
                        new
                        {
                            Id = "f3c9e478-8d81-4aaf-aa77-56e1d3f5f3f38",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b3165a1b-99a3-4784-af62-9a7609e10874",
                            Email = "patient8@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT8@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT8@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b4fda7f8-774b-455d-83f4-cf17f3cc493d",
                            TwoFactorEnabled = false,
                            UserName = "patient8@example.com",
                            EstApprouvee = false
                        },
                        new
                        {
                            Id = "g4d0a589-2b02-4d36-9a85-39c028a4g4g9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0b538f0-100f-442d-ada5-7a09ec93a8af",
                            Email = "patient9@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT9@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT9@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c514d1f5-3df4-45c0-acb9-72b05f0d1d9b",
                            TwoFactorEnabled = false,
                            UserName = "patient9@example.com",
                            EstApprouvee = false
                        },
                        new
                        {
                            Id = "g4d0a589-2b02-4d36-9a85-39c028a4g410",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7967dd84-fdb9-4bc1-90c3-28ce15898f55",
                            Email = "patient10@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT10@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT10@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c04f2d9-89f2-40de-b959-38a1ef2a72bf",
                            TwoFactorEnabled = false,
                            UserName = "patient10@example.com",
                            EstApprouvee = false
                        },
                        new
                        {
                            Id = "7cc96785-8933-4eac-8d7f-a289b28df211",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "042cf2e7-0527-45d6-9ebe-c59aac6fe45a",
                            Email = "patient11@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT11@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT11@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56b7212a-2bfd-409c-ab67-caf190522824",
                            TwoFactorEnabled = false,
                            UserName = "patient11@example.com",
                            EstApprouvee = false
                        },
                        new
                        {
                            Id = "e2b8f367-6c94-4a3e-b5a6-45dabec4d212",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3bc8bce2-14c0-4eac-89dc-f5332e95720a",
                            Email = "patient12@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT12@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT12@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a4c7235-b061-46f5-9946-7263a51da140",
                            TwoFactorEnabled = false,
                            UserName = "patient12@example.com",
                            EstApprouvee = false
                        },
                        new
                        {
                            Id = "f3c9e478-8d81-4aaf-aa77-56e1d3f5f313",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d301ebf6-0dac-41ff-9f43-6d9c7c318e72",
                            Email = "patient13@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT13@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT13@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18e58b93-68a8-4702-ac94-92a2c5179ec4",
                            TwoFactorEnabled = false,
                            UserName = "patient13@example.com",
                            EstApprouvee = false
                        },
                        new
                        {
                            Id = "g4d0a589-2b02-4d36-9a85-39c028a4g414",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a38bcaf9-be4c-435d-9d16-60242607af6d",
                            Email = "patient14@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT14@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT14@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1dfe6661-5eef-4193-9945-b798bad8032c",
                            TwoFactorEnabled = false,
                            UserName = "patient14@example.com",
                            EstApprouvee = false
                        },
                        new
                        {
                            Id = "g4d0a589-2b02-4d36-9a85-39c028a4g415",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1c4ea3fb-d871-407d-ac53-282d22b385bf",
                            Email = "patient15@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT15@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT15@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "024dfd3c-58fe-4802-939e-185cc1ed3594",
                            TwoFactorEnabled = false,
                            UserName = "patient15@example.com",
                            EstApprouvee = false
                        },
                        new
                        {
                            Id = "7cc96785-8933-4eac-8d7f-a289b28df216",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd71c584-ec2c-4d26-94c6-4447d26723b0",
                            Email = "patient16@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT16@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT16@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec137f14-0666-4a02-9eac-0fdd210d7367",
                            TwoFactorEnabled = false,
                            UserName = "patient16@example.com",
                            EstApprouvee = false
                        },
                        new
                        {
                            Id = "e2b8f367-6c94-4a3e-b5a6-45dabec4d217",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6990a1f0-6460-4c0c-81ea-aef12cdb78b3",
                            Email = "patient17@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT17@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT17@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "906c9413-36ce-44a6-ac36-812d87e4cd53",
                            TwoFactorEnabled = false,
                            UserName = "patient17@example.com",
                            EstApprouvee = false
                        },
                        new
                        {
                            Id = "f3c9e478-8d81-4aaf-aa77-56e1d3f5f318",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cdec89d1-eb19-4018-a57e-5cb727e5940d",
                            Email = "patient18@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT18@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT18@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b9e3621-68cd-4bd6-b397-9c47c742b9af",
                            TwoFactorEnabled = false,
                            UserName = "patient18@example.com",
                            EstApprouvee = false
                        },
                        new
                        {
                            Id = "g4d0a589-2b02-4d36-9a85-39c028a4g419",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd41c221-c14e-4a6c-b754-4ebe2e369b14",
                            Email = "patient19@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT19@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT19@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c740dab-00ad-435c-b16e-ed90f46ae875",
                            TwoFactorEnabled = false,
                            UserName = "patient19@example.com",
                            EstApprouvee = false
                        },
                        new
                        {
                            Id = "g4d0a589-2b02-4d36-9a85-39c028a4g420",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3e5a8bc-b7df-49d5-906e-544ee1ff7a8b",
                            Email = "patient20@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT20@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT20@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1bf7371f-ff0c-4fdc-a1dc-8443c58f17e5",
                            TwoFactorEnabled = false,
                            UserName = "patient20@example.com",
                            EstApprouvee = false
                        },
                        new
                        {
                            Id = "g4d0a589-2b02-4d36-9a85-39c028a4g421",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dce72648-471f-41a0-bf3c-38f514207f6d",
                            Email = "patient21@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT21@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT21@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d418cf55-4781-4d14-ac24-69db013565d7",
                            TwoFactorEnabled = false,
                            UserName = "patient21@example.com",
                            EstApprouvee = false
                        },
                        new
                        {
                            Id = "g4d0a589-2b02-4d36-9a85-39c028a4g22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aad57f07-b93a-49ef-9c35-a8f599e72c87",
                            Email = "patient22@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT22@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT22@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "113ad9e0-4960-411f-8c01-3f101ee94546",
                            TwoFactorEnabled = false,
                            UserName = "patient22@example.com",
                            EstApprouvee = false
                        });
                });

            modelBuilder.Entity("Clinique2000_Core.Models.Clinique", b =>
                {
                    b.HasOne("Clinique2000_Core.Models.Adresse", "Adresse")
                        .WithOne("Clinique")
                        .HasForeignKey("Clinique2000_Core.Models.Clinique", "AdresseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinique2000_Core.Models.ApplicationUser", "Createur")
                        .WithMany("Clinique")
                        .HasForeignKey("CreateurID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adresse");

                    b.Navigation("Createur");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.CliniqueRefusee", b =>
                {
                    b.HasOne("Clinique2000_Core.Models.Adresse", "Adresse")
                        .WithMany()
                        .HasForeignKey("AdresseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinique2000_Core.Models.ApplicationUser", "Createur")
                        .WithMany()
                        .HasForeignKey("CreateurID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adresse");

                    b.Navigation("Createur");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.Consultation", b =>
                {
                    b.HasOne("Clinique2000_Core.Models.DetailsConsultation", "DetailsConsultation")
                        .WithMany()
                        .HasForeignKey("DetailsConsultationId");

                    b.HasOne("Clinique2000_Core.Models.EmployesClinique", "EmployeClinique")
                        .WithMany()
                        .HasForeignKey("EmployeCliniqueID");

                    b.HasOne("Clinique2000_Core.Models.ListeAttente", null)
                        .WithMany("Consultations")
                        .HasForeignKey("ListeAttenteID");

                    b.HasOne("Clinique2000_Core.Models.Patient", "Patient")
                        .WithMany("Consultations")
                        .HasForeignKey("PatientID");

                    b.HasOne("Clinique2000_Core.Models.PlageHoraire", "PlageHoraire")
                        .WithMany("Consultations")
                        .HasForeignKey("PlageHoraireID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DetailsConsultation");

                    b.Navigation("EmployeClinique");

                    b.Navigation("Patient");

                    b.Navigation("PlageHoraire");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.Critique", b =>
                {
                    b.HasOne("Clinique2000_Core.Models.Clinique", "Clinique")
                        .WithMany("Critique")
                        .HasForeignKey("CliniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinique");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.EmployesClinique", b =>
                {
                    b.HasOne("Clinique2000_Core.Models.Clinique", "Clinique")
                        .WithMany("EmployesCliniques")
                        .HasForeignKey("CliniqueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinique2000_Core.Models.CliniqueRefusee", null)
                        .WithMany("EmployesCliniques")
                        .HasForeignKey("CliniqueRefuseeID");

                    b.HasOne("Clinique2000_Core.Models.ApplicationUser", "User")
                        .WithMany("EmployesCliniques")
                        .HasForeignKey("UserID");

                    b.Navigation("Clinique");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.ListeAttente", b =>
                {
                    b.HasOne("Clinique2000_Core.Models.Clinique", "Clinique")
                        .WithMany("ListeAttente")
                        .HasForeignKey("CliniqueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinique2000_Core.Models.CliniqueRefusee", null)
                        .WithMany("ListeAttente")
                        .HasForeignKey("CliniqueRefuseeID");

                    b.Navigation("Clinique");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.Patient", b =>
                {
                    b.HasOne("Clinique2000_Core.Models.ApplicationUser", "User")
                        .WithOne("Patient")
                        .HasForeignKey("Clinique2000_Core.Models.Patient", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.PatientACharge", b =>
                {
                    b.HasOne("Clinique2000_Core.Models.Patient", "Patient")
                        .WithMany("PatientsACharge")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.PlageHoraire", b =>
                {
                    b.HasOne("Clinique2000_Core.Models.ListeAttente", "ListeAttente")
                        .WithMany("PlagesHoraires")
                        .HasForeignKey("ListeAttenteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ListeAttente");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Clinique2000_Core.Models.Adresse", b =>
                {
                    b.Navigation("Clinique")
                        .IsRequired();
                });

            modelBuilder.Entity("Clinique2000_Core.Models.Clinique", b =>
                {
                    b.Navigation("Critique");

                    b.Navigation("EmployesCliniques");

                    b.Navigation("ListeAttente");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.CliniqueRefusee", b =>
                {
                    b.Navigation("EmployesCliniques");

                    b.Navigation("ListeAttente");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.ListeAttente", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("PlagesHoraires");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.Patient", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("PatientsACharge");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.PlageHoraire", b =>
                {
                    b.Navigation("Consultations");
                });

            modelBuilder.Entity("Clinique2000_Core.Models.ApplicationUser", b =>
                {
                    b.Navigation("Clinique");

                    b.Navigation("EmployesCliniques");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
