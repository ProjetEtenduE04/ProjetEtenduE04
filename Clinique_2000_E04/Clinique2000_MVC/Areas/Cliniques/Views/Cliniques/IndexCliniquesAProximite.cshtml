@model IEnumerable<CliniqueDistanceVM>

@{
    ViewData["Title"] = "Index";
}
<!-- Page modale explication calcul distance -->
@*<div id="myModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <div class="text-center">
            <h2>Distance</h2>
            <p>La distance en kilomètres affichée pour chaque clinique de cette liste est approximative.</p>
        </div>
    </div>
</div>
*@


<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
      crossorigin="" />

       <!-- Make sure you put this AFTER Leaflet's CSS -->
 <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
     integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
     crossorigin=""></script>


<div class="margin-container-index">
    <h1 class="text-center">Cliniques à proximité</h1>
    <div class="row">
        <div class="col-1"></div>
        <div class="col-6" style="display: flex;margin:20px 0">
        </div>
    </div>
    <div class="row">
        <div class="col-1">
        </div>
        <div class="col-10">
            <div class="card mb-4">
                <div class="card-header card-header-datatables h4 text-light">
                    <i class="fa-solid fa-location-dot me-1" style="color: #fff;"></i>
                    Cliniques à proximité
                </div>
                <div class="card-body">
                    <div class="table-responsive mx-auto">
                        <table class="table hover order-column" id="dataTableDistance">
                            <thead>
                                <tr>
                                    <th>@Html.DisplayNameFor(model => model.Clinique.NomClinique)</th>
                                    <th>@Html.DisplayNameFor(model => model.HeureProchaineConsultation)</th>
                                    <th class="justify-content-center align-items-center">
                                        @Html.DisplayNameFor(model => model.Distance) (kilomètres)
                                        <button type="button" class="btn btnRound"
                                                data-bs-toggle="popover" data-bs-placement="right"
                                                data-bs-custom-class="custom-popover"
                                                data-bs-title="Distance"
                                                data-bs-trigger="hover focus"
                                                data-bs-content="La distance en kilomètres affichée pour chaque clinique de cette liste est approximative.">
                                            <i class="fa-solid fa-circle-info" style="color: #3db38f;"></i>
                                        </button>
                                        @*<i id="openModalBtn" style="  color: #023373;" class="fa-solid fa-circle-info fa-lg"></i>*@
                                    </th>
                                    <th>@Html.DisplayNameFor(model => model.Clinique.Adresse)</th>

                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model)
                                {
                                    var listeAttenteId = item.Clinique.ListeAttente.Where(x => x.CliniqueID == item.Clinique.CliniqueID && x.IsOuverte).First()?.ListeAttenteID;
                                    string concatenatedAddress = $"{item.Clinique.Adresse.Numero} {item.Clinique.Adresse.Rue}, {item.Clinique.Adresse.Ville}, {item.Clinique.Adresse.Province}, {item.Clinique.Adresse.Pays}, {item.Clinique.Adresse.CodePostal}";

                                    <tr>
                                        <td>@Html.DisplayFor(modelItem => item.Clinique.NomClinique)</td>
                                        <td>@Html.DisplayFor(modelItem => item.HeureProchaineConsultation)</td>
                                        <td>@Html.DisplayFor(modelItem => item.Distance)</td>
                                        <td>@concatenatedAddress</td>
                                        <td class="clinic-row" data-clinic-id="@item.Clinique.CliniqueID">
                                            @if (listeAttenteId != null)
                                            {
                                                <a asp-area="Cliniques" asp-controller="ListeAttente" asp-action="DetailsOrdonnes" asp-route-id="@listeAttenteId" class="smBtn button-blue-action " style="width:auto">Voir la liste d'attente</a>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-1">
        </div>
    </div>
</div>
<div id="waitingListsContainer"></div>


<div id="map" style="width: 100%; height: 400px; " class="container"></div>


@section Scripts {
    <script>
        var map = L.map('map').setView([@ViewBag.PatientLatitude, @ViewBag.PatientLongitude], 12);

        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        var patientIcon = L.icon({
            iconUrl: '@Url.Content("~/images/Usericon2.png")', // This will resolve to the correct path for your icon
            iconSize: [30, 60], // Size of the icon
            iconAnchor: [22, 94], // Point of the icon which will correspond to marker's location
            popupAnchor: [-3, -76] // Point from which the popup should open relative to the iconAnchor
        });
        var cliniqueIcon = L.icon({
            iconUrl: '@Url.Content("~/images/CliniqueIcon.png")', // This will resolve to the correct path for your icon
            iconSize: [30, 50], // Size of the icon
            iconAnchor: [22, 94], // Point of the icon which will correspond to marker's location
            popupAnchor: [-3, -76] // Point from which the popup should open relative to the iconAnchor
        });

        L.marker([@ViewBag.PatientLatitude, @ViewBag.PatientLongitude], { icon: patientIcon }).addTo(map)
            .bindPopup('Vous ête ici')
            .openPopup();

        // Ajouter des marqueurs pour chaque clinique
        @foreach (var clinique in Model)
        {
            if (clinique.Clinique != null)
            {
                <text>
                                    var clinicLat = @clinique.CliniqueLatitude;
                var clinicLng = @clinique.CliniqueLongitude
                var clinicMarker = L.marker([clinicLat, clinicLng], { icon: cliniqueIcon }).addTo(map)
                    .bindPopup('<b>' + '@clinique.Clinique.NomClinique' + '  ' + '@clinique.Distance' + 'Km' + '</b><br />' );

                </text>
            }
        }

    </script>
}



<script>
    //// Get modal element
    //var modal = document.getElementById("myModal");

    //// Get the button that opens the modal
    //var btn = document.getElementById("openModalBtn");

    //// Get the <span> element that closes the modal
    //var span = document.getElementsByClassName("close")[0];

    //// When the user clicks the button, open the modal
    //btn.onclick = function () {
    //    modal.style.display = "block";
    //}

    //// When the user clicks on <span> (x), close the modal
    //span.onclick = function () {
    //    modal.style.display = "none";
    //}

    //// When the user clicks anywhere outside of the modal, close it
    //window.onclick = function (event) {
    //    if (event.target == modal) {
    //        modal.style.display = "none";
    //    }
    //}
</script>